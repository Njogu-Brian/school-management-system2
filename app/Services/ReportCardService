<?php

namespace App\Services;

use App\Models\Academics\Exam;
use App\Models\Academics\ExamMark;
use App\Models\Academics\ExamGrade;
use App\Models\Academics\ReportCard;
use Barryvdh\DomPDF\Facade\Pdf;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

class ReportCardService
{
    public function build(int $studentId, int $yearId, int $termId): ReportCard
    {
        $exam = Exam::where('academic_year_id',$yearId)->where('term_id',$termId)->first();
        $rc = ReportCard::firstOrCreate([
            'student_id'       => $studentId,
            'academic_year_id' => $yearId,
            'term_id'          => $termId,
        ], [
            'classroom_id' => optional($exam)->classroom_id,
            'stream_id'    => optional($exam)->stream_id,
            'public_token' => Str::random(48),
        ]);

        $marks = ExamMark::with('subject','exam')
            ->where('student_id',$studentId)
            ->whereHas('exam', fn($q)=>$q->where('academic_year_id',$yearId)->where('term_id',$termId))
            ->get();

        $avg = $marks->count()
            ? round($marks->avg(fn($m)=>$m->endterm_score ?? $m->midterm_score ?? $m->opener_score ?? $m->score_raw ?? 0), 2)
            : null;

        $rc->summary = [
            'subjects' => $marks->count(),
            'avg'      => $avg,
            'bands'    => [
                'EE' => $marks->where('grade_label','EE')->count(),
                'ME' => $marks->where('grade_label','ME')->count(),
                'AE' => $marks->where('grade_label','AE')->count(),
                'BE' => $marks->where('grade_label','BE')->count(),
            ],
        ];
        $rc->save();

        return $rc;
    }

    public function gradeFor(string $examType, float $score): array
    {
        $g = \App\Models\Academics\ExamGrade::where('exam_type',$examType)
            ->where('percent_from','<=',$score)
            ->where('percent_upto','>=',$score)
            ->first();

        return [
            'label' => $g->grade_name ?? 'BE',
            'point' => $g->grade_point ?? 1.0,
        ];
    }

    public function generatePdf(ReportCard $rc): string
    {
        $rc->load(['student','classroom','stream','skills','marks.subject','marks.exam']);

        $pdf = Pdf::loadView('academics.report_cards.pdf', [
            'rc'   => $rc,
            'logo' => public_path('images/logo.png'),
            'legend' => [
                'EE' => 'EXCEEDING EXPECTATION',
                'ME' => 'MEETING EXPECTATION',
                'AE' => 'ABOVE EXPECTATION',
                'BE' => 'BELOW EXPECTATION',
            ],
        ])->setPaper('A4', 'portrait');

        $file = "report_cards/{$rc->academic_year_id}_{$rc->term_id}_{$rc->student_id}.pdf";
        Storage::disk('public')->put($file, $pdf->output());
        $rc->update(['pdf_path'=>$file]);

        return $file;
    }
}
